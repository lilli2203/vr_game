using UnityEngine;
using UnityEngine.UI;

public class DebugUIManager : MonoBehaviour
{
    private static Canvas _canvas;
    private static Text _statusText;
    private static Text _debugText;
    private static Text _memoryText;
    private static bool _showMemoryUsage = false;
    private static int _maxMemoryUsage = 0;
    private static int _averageMemoryUsage = 0;
    private static int _memorySamples = 0;
    private const int MAX_LINES = 100;

    private void Awake()
    {
        // Initialize references to UI components
        _canvas = GetComponentInChildren<Canvas>();
        _statusText = _canvas.transform.Find("StatusText").GetComponent<Text>();
        _debugText = _canvas.transform.Find("DebugText").GetComponent<Text>();
        _memoryText = _canvas.transform.Find("MemoryText").GetComponent<Text>();
    }

    public static void SetVisibility(bool visible)
    {
        if (_canvas == null) return;
        _canvas.enabled = visible;
    }

    public static void ToggleVisibility()
    {
        if (_canvas == null) return;
        _canvas.enabled = !_canvas.enabled;
    }

    public static void SetStatus(string message)
    {
        if (_statusText == null) return;
        _statusText.text = message;
    }

    private static void TrimText()
    {
        string[] lines = _debugText.text.Split('\n');
        if (lines.Length > MAX_LINES)
        {
            _debugText.text = string.Join("\n", lines, lines.Length - MAX_LINES, MAX_LINES);
        }
    }

    public void ToggleMemoryUsageDisplay()
    {
        _showMemoryUsage = !_showMemoryUsage;
        if (!_showMemoryUsage)
        {
            _memoryText.text = "";
        }
    }

    public static void LogCustomMessage(string message, LogType type)
    {
        switch (type)
        {
            case LogType.Error:
                Debug.LogError(message);
                break;
            case LogType.Assert:
                Debug.LogAssertion(message);
                break;
            case LogType.Warning:
                Debug.LogWarning(message);
                break;
            case LogType.Log:
            default:
                Debug.Log(message);
                break;
        }
    }

    public static void ClearAllLogs()
    {
        if (_debugText == null) return;
        _debugText.text = "";
        _statusText.text = "";
    }

    public void ShowFpsGraph()
    {
        Debug.Log("FPS Graph feature not implemented yet.");
    }

    public static void LogPerformanceData()
    {
        float frameTime = Time.deltaTime * 1000f;
        float fps = 1.0f / Time.deltaTime;
        Debug.Log($"Frame Time: {frameTime:F2} ms, FPS: {fps:F2}");
    }

    public static void SaveLogsToFile(string fileName)
    {
        string path = $"{Application.persistentDataPath}/{fileName}.txt";
        System.IO.File.WriteAllText(path, _debugText.text);
        Debug.Log($"Logs saved to {path}");
    }

    public static void ClearMemoryStats()
    {
        if (_memoryText == null) return;
        _maxMemoryUsage = 0;
        _averageMemoryUsage = 0;
        _memorySamples = 0;
        _memoryText.text = "Memory stats cleared";
    }

    public static void UpdateStatusWithTimestamp(string message)
    {
        string timestamp = System.DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        _statusText.text = $"[{timestamp}] {message}";
    }

    // Update is called once per frame
    void Update()
    {
        if (_showMemoryUsage)
        {
            int currentMemoryUsage = (int)(System.GC.GetTotalMemory(false) / (1024 * 1024));
            _maxMemoryUsage = Mathf.Max(_maxMemoryUsage, currentMemoryUsage);
            _averageMemoryUsage = (_averageMemoryUsage * _memorySamples + currentMemoryUsage) / (_memorySamples + 1);
            _memorySamples++;
            _memoryText.text = $"Current: {currentMemoryUsage} MB\nMax: {_maxMemoryUsage} MB\nAverage: {_averageMemoryUsage} MB";
        }
    }
}
