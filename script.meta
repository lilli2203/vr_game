using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class WallPanelManager : MonoBehaviour
{
    public int height = 13874;

    private GameObject pointCircle;
    private bool isPanelSelected = false;
    private Dictionary<string, Texture2D> savedPanels = new Dictionary<string, Texture2D>();
    private Stack<string> undoStack = new Stack<string>();
    private Stack<string> redoStack = new Stack<string>();

    public TMP_Text statusText;
    public Texture2D currentTexture;

    void Start()
    {
        LoadTextures();
        UpdateStatusText("Ready to select panels.");
    }

    void Update()
    {
        if (isPanelSelected)
        {
            CheckForWallPointing();
        }
        HandleUndoRedo();
        HandleSaveLoadPanelStates();
    }

    private void LoadTextures()
    {
        // Implement the loading of textures as per your requirement
    }

    private void CheckForWallPointing()
    {
        // Implement the logic for checking if the user is pointing at a wall
    }

    private void ApplyWallPanel(GameObject hitPlane)
    {
        Material material = new Material(Shader.Find("Standard"))
        {
            mainTexture = currentTexture,
            color = Color.white
        };

        MeshRenderer planeRenderer = hitPlane.GetComponentInParent<MeshRenderer>();
        planeRenderer.material = material;
        string panelName = hitPlane.transform.parent.name;

        if (savedPanels.ContainsKey(panelName))
        {
            undoStack.Push(panelName);
        }
        savedPanels[panelName] = currentTexture;
        SavePanelStates();
    }

    private void SavePanelStates()
    {
        foreach (var panel in savedPanels)
        {
            PlayerPrefs.SetString(panel.Key, Convert.ToBase64String(panel.Value.EncodeToPNG()));
        }
        PlayerPrefs.Save();
    }

    private void LoadPanelStates()
    {
        foreach (string key in PlayerPrefs.Keys)
        {
            if (PlayerPrefs.HasKey(key))
            {
                string base64 = PlayerPrefs.GetString(key);
                byte[] bytes = System.Convert.FromBase64String(base64);
                Texture2D texture = new Texture2D(2, 2);
                texture.LoadImage(bytes);
                savedPanels[key] = texture;
            }
        }
    }

    private void UpdateStatusText(string message)
    {
        if (statusText != null)
        {
            statusText.text = message;
        }
    }

    private void HandleUndoRedo()
    {
        if (OVRInput.GetDown(OVRInput.Button.One))
        {
            UndoLastAction();
        }

        if (OVRInput.GetDown(OVRInput.Button.Two))
        {
            RedoLastAction();
        }
    }

    private void UndoLastAction()
    {
        if (undoStack.Count > 0)
        {
            string panelName = undoStack.Pop();
            redoStack.Push(panelName);

            if (PlayerPrefs.HasKey(panelName))
            {
                PlayerPrefs.DeleteKey(panelName);
            }

            foreach (GameObject hitPlane in GameObject.FindGameObjectsWithTag("WALL_FACE"))
            {
                if (hitPlane.transform.parent.name == panelName)
                {
                    hitPlane.GetComponentInParent<MeshRenderer>().material = null;
                    savedPanels.Remove(panelName);
                    UpdateStatusText("Undid texture application for " + panelName);
                    break;
                }
            }
        }
        else
        {
            UpdateStatusText("No actions to undo.");
        }
    }

    private void RedoLastAction()
    {
        if (redoStack.Count > 0)
        {
            string panelName = redoStack.Pop();
            if (savedPanels.ContainsKey(panelName))
            {
                Texture2D texture = savedPanels[panelName];
                foreach (GameObject hitPlane in GameObject.FindGameObjectsWithTag("WALL_FACE"))
                {
                    if (hitPlane.transform.parent.name == panelName)
                    {
                        ApplySavedTexture(hitPlane, texture);
                        undoStack.Push(panelName);
                        UpdateStatusText("Redid texture application for " + panelName);
                        break;
                    }
                }
            }
        }
        else
        {
            UpdateStatusText("No actions to redo.");
        }
    }

    private void ApplySavedTexture(GameObject hitPlane, Texture2D texture)
    {
        Material material = new Material(Shader.Find("Standard"))
        {
            mainTexture = texture,
            color = Color.white
        };

        MeshRenderer planeRenderer = hitPlane.GetComponentInParent<MeshRenderer>();
        planeRenderer.material = material;
    }

    private void HandleSaveLoadPanelStates()
    {
        if (OVRInput.GetDown(OVRInput.Button.Start))
        {
            SavePanelStates();
            UpdateStatusText("Panel states saved.");
        }

        if (OVRInput.GetDown(OVRInput.Button.Select))
        {
            LoadPanelStates();
            ApplyLoadedPanelStates();
            UpdateStatusText("Panel states loaded.");
        }
    }

    private void ApplyLoadedPanelStates()
    {
        foreach (var panel in savedPanels)
        {
            foreach (GameObject hitPlane in GameObject.FindGameObjectsWithTag("WALL_FACE"))
            {
                if (hitPlane.transform.parent.name == panel.Key)
                {
                    ApplySavedTexture(hitPlane, panel.Value);
                    break;
                }
            }
        }
    }

    public void ClearAllPanels()
    {
        foreach (GameObject hitPlane in GameObject.FindGameObjectsWithTag("WALL_FACE"))
        {
            hitPlane.GetComponentInParent<MeshRenderer>().material = null;
        }

        savedPanels.Clear();
        undoStack.Clear();
        redoStack.Clear();
        PlayerPrefs.DeleteAll();
        UpdateStatusText("All panels cleared.");
    }
}
