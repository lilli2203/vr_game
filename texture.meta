using UnityEngine;

public class DrawingController : MonoBehaviour
{
    [SerializeField] private Shader shader;
    [SerializeField] private Texture texture;
    [SerializeField] private Color currentColor = Color.white;
    [SerializeField] private float textureScale = 1.0f;

    private bool isDrawing = false;
    private bool isErasing = false;
    private LineRenderer lineRenderer;
    private Vector3 previousPosition;

    void Update()
    {
        HandleDrawingMode();
        HandleErasingMode();
    }

    private void HandleDrawingMode()
    {
        if (OVRInput.GetDown(OVRInput.Button.One))
        {
            ToggleDrawingMode();
        }

        if (isDrawing && OVRInput.Get(OVRInput.Button.PrimaryHandTrigger))
        {
            Vector3 controllerPosition = OVRInput.GetLocalControllerPosition(OVRInput.Controller.RTouch);
            Quaternion controllerRotation = OVRInput.GetLocalControllerRotation(OVRInput.Controller.RTouch);
            Vector3 rayDirection = controllerRotation * Vector3.forward;

            if (Physics.Raycast(controllerPosition, rayDirection, out RaycastHit hit))
            {
                GameObject hitObject = hit.collider.gameObject;

                if (hitObject.CompareTag("Drawable"))
                {
                    DrawLine(hit.point);
                }
            }
        }
    }

    private void HandleErasingMode()
    {
        if (OVRInput.GetDown(OVRInput.Button.Two))
        {
            ToggleErasingMode();
        }

        if (isErasing && OVRInput.Get(OVRInput.Button.PrimaryHandTrigger))
        {
            Vector3 controllerPosition = OVRInput.GetLocalControllerPosition(OVRInput.Controller.RTouch);
            Quaternion controllerRotation = OVRInput.GetLocalControllerRotation(OVRInput.Controller.RTouch);
            Vector3 rayDirection = controllerRotation * Vector3.forward;

            if (Physics.Raycast(controllerPosition, rayDirection, out RaycastHit hit))
            {
                GameObject hitObject = hit.collider.gameObject;

                if (hitObject.CompareTag("Drawable"))
                {
                    EraseDrawing(hitObject);
                }
            }
        }
    }

    private void ToggleDrawingMode()
    {
        isDrawing = !isDrawing;
        if (isDrawing)
        {
            SetTextMessage("Drawing Mode Activated");
        }
        else
        {
            SetTextMessage("Drawing Mode Deactivated");
        }
    }

    private void ToggleErasingMode()
    {
        isErasing = !isErasing;
        if (isErasing)
        {
            SetTextMessage("Erasing Mode Activated");
        }
        else
        {
            SetTextMessage("Erasing Mode Deactivated");
        }
    }

    private void ApplyMaterialToPlane(GameObject hitPlane)
    {
        Material material = new Material(shader)
        {
            mainTexture = texture,
            color = currentColor
        };
        material.SetFloat("_Cull", (float)CullMode.Off);
        hitPlane.GetComponent<Renderer>().material = material;
    }

    private void DrawLine(Vector3 newPoint)
    {
        if (lineRenderer == null)
        {
            GameObject lineObject = new GameObject("Line");
            lineRenderer = lineObject.AddComponent<LineRenderer>();
            lineRenderer.material = new Material(shader)
            {
                mainTexture = texture,
                color = currentColor
            };
            lineRenderer.positionCount = 0;
            lineRenderer.startWidth = 0.05f;
            lineRenderer.endWidth = 0.05f;
            lineRenderer.useWorldSpace = true;
        }

        lineRenderer.positionCount++;
        lineRenderer.SetPosition(lineRenderer.positionCount - 1, newPoint);
    }

    private void EraseDrawing(GameObject hitObject)
    {
        LineRenderer hitLineRenderer = hitObject.GetComponent<LineRenderer>();
        if (hitLineRenderer != null)
        {
            hitLineRenderer.positionCount = 0;
        }
    }

    public void IncreaseTextureScale()
    {
        textureScale += 0.1f;
        UpdateLineMaterial();
    }

    public void DecreaseTextureScale()
    {
        textureScale = Mathf.Max(0.1f, textureScale - 0.1f);
        UpdateLineMaterial();
    }

    private void UpdateLineMaterial()
    {
        if (lineRenderer != null)
        {
            lineRenderer.material.mainTextureScale = new Vector2(textureScale, textureScale);
        }
    }

    private void SetTextMessage(string message)
    {
        // Assuming there's a UI Text element to display messages to the user
        Debug.Log(message);
    }
}
